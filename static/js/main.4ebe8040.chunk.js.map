{"version":3,"sources":["serviceWorker.ts","shared/contexts/PagesContext.tsx","shared/helpers/classNames.ts","pages/organization/index.tsx","shared/components/spinner/index.tsx","shared/components/input/index.tsx","core/interceptors/default.interceptor.js","core/services/api.service.js","shared/services/organization.service.ts","core/providers/api.service.provider.js","pages/search/index.tsx","pages/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","PagesContext","createContext","PagesContextProvider","props","useState","loading","setLoading","slickRef","setSlickRef","organization","setOrganization","Provider","value","children","classNames","classes","Object","entries","filter","map","key","join","Organization","repositoriesOpenned","setRepositoriesOpenned","termSearching","setTermSearching","searchChanged","e","target","Consumer","context","undefined","className","subpage","primary","full","id","src","avatar_url","alt","name","description","size","href","blog","onClick","public_repos","onChange","placeholder","repositories","repo","items__item","displaying","length","full_name","includes","Spinner","active","spinner","Input","onChangeInput","onClickButton","selfValue","inputGroup__button","inputGroup__input","type","htmlFor","defaultInterceptor","API_ENV_VARIABLE","token","config","baseURL","process","headers","Authorization","instance","axios","create","ApiInterceptorProvider","API_ENV","toUpperCase","ApiService","apiName","this","axiosHttp","uri","params","get","catch","error","Error","post","put","patch","delete","ApiServiceProvider","fetchOrganization","organizationName","fetchOrganizationRepository","Search","setOrganizationName","OrganizationService","then","res","data","repositoriesResponse","slickGoTo","setTimeout","err","onClickButtonAction","Pages","settings","dots","infinite","speed","slidesToShow","slidesToScroll","arrows","draggable","ref","slider","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.4ebe8040.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { createContext, useState } from 'react';\r\n\r\nexport const PagesContext = createContext<Partial<any>>({});\r\n\r\nexport function PagesContextProvider(props: any) {\r\n\r\n  const [ loading, setLoading ] = useState<boolean>(false);\r\n\r\n  const [ slickRef, setSlickRef ] = useState<any>();\r\n\r\n  const [ organization, setOrganization ] = useState<any>();\r\n\r\n  return (\r\n    <PagesContext.Provider value={ \r\n      { \r\n        loading,\r\n        setLoading,\r\n        slickRef, \r\n        setSlickRef,\r\n        organization,\r\n        setOrganization\r\n      }\r\n    }>\r\n      { props.children }\r\n    </PagesContext.Provider>\r\n  );\r\n}\r\n","function classNames(classes: Object): string {\r\n    return Object.entries(classes)\r\n        .filter(([key, value]) => value)\r\n        .map(([key, value]) => key)\r\n        .join(' ');\r\n}\r\n\r\nexport default classNames;","import React, { useState } from 'react';\r\nimport { PagesContext } from '../../shared/contexts/PagesContext';\r\nimport './organization.scss';\r\nimport { FiMapPin, FiLink2, FiCheck, FiBook } from 'react-icons/fi';\r\nimport classNames from '../../shared/helpers/classNames';\r\n\r\n\r\n\r\n\r\nfunction Organization() {\r\n  const [repositoriesOpenned, setRepositoriesOpenned] = useState<boolean>(false);\r\n\r\n  const [termSearching, setTermSearching] = useState<string>('');\r\n\r\n  const searchChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTermSearching(e.target.value);\r\n  }\r\n  return (\r\n    <PagesContext.Consumer>\r\n      {\r\n        (context) => {\r\n          return context.organization !== undefined ? (\r\n            <div className=\"app__page divided\">\r\n              <section className={\r\n                classNames({\r\n                  subpage: true,\r\n                  'subpage--slide': repositoriesOpenned,\r\n                  primary: true,\r\n                  full: !repositoriesOpenned\r\n                })\r\n              } id=\"organization-page\">\r\n                <header className=\"organization\">\r\n                  <div className=\"organization__picture\">\r\n                    <img src={context.organization.avatar_url} alt={`${context.organization.name} logo`}/>\r\n                  </div>\r\n                  <div className=\"organization__infos\">\r\n                    <div className=\"infos__identity\">\r\n                      <h1>{ context.organization.name }</h1>\r\n                      <p>{ context.organization.description }.</p>\r\n                    </div>\r\n                    \r\n                    <div className=\"infos__extra\">\r\n                      <div className=\"information__block\">\r\n                        <FiMapPin size={10} ></FiMapPin> <span>{ context.organization.location }</span>\r\n                      </div>\r\n                      <div className=\"information__block\">\r\n                        <FiLink2 size={10} ></FiLink2> <a href={ context.organization.blog } >{ context.organization.blog }</a>\r\n                      </div>\r\n                      <div className=\"information__block success\">\r\n                        <FiCheck size={10} ></FiCheck> <span>Verified</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"organization__actions\">\r\n                    <button onClick={\r\n                      () => setRepositoriesOpenned(!repositoriesOpenned)\r\n                      \r\n                    }><FiBook size={10} ></FiBook>{repositoriesOpenned ? 'Close' : 'See'} repositories <span>{ context.organization.public_repos }</span></button>\r\n                  </div>\r\n                </header>\r\n              </section>\r\n              <section className={\r\n                classNames({\r\n                  subpage: true,\r\n                  'subpage--slide': repositoriesOpenned\r\n                })\r\n              } id=\"repositories\">\r\n                <div className='repository'>\r\n                  <header>\r\n                    <input className='repository__filter' onChange={ searchChanged } placeholder='search...'/>\r\n                  </header>\r\n                  <article className='repository__content'>\r\n                    <div className='repository__list items'>\r\n                      {\r\n                        context.organization.repositories.map(\r\n                          (repo:any, key: number) => {\r\n                            return (\r\n                              <div className={\r\n                                classNames({\r\n                                  items__item: true,\r\n                                  displaying: (termSearching.length > 0 && repo.full_name.includes(termSearching)) ||  termSearching.length === 0\r\n                                })\r\n                              } key={key}>\r\n                                <div className='item__title'>\r\n                                  <h2>{repo.full_name}</h2>\r\n                                  <p>{repo.description}</p>\r\n                                </div>\r\n                              </div>\r\n                            );\r\n                          }\r\n                        )\r\n                      }\r\n                    </div>\r\n                    \r\n                  </article>\r\n                </div>\r\n                \r\n              </section>\r\n            </div>\r\n          ) : (<></>)\r\n        }\r\n      }\r\n    </PagesContext.Consumer>\r\n    \r\n  );\r\n}\r\nexport default Organization;","import React from 'react';\r\nimport classNames from '../../helpers/classNames';\r\nimport './spinner.scss';\r\n\r\ninterface SpinnerProps {\r\n  active: boolean\r\n}\r\n\r\nfunction Spinner({active}: SpinnerProps) {\r\n  return (\r\n    <div className={\r\n      classNames(\r\n          {\r\n            spinner: true,\r\n            'spinner--active': active\r\n          }\r\n        )\r\n    }>\r\n      <div className=\"spinner__content\"></div>\r\n      <div className=\"spinner__content\"></div>\r\n      <div className=\"spinner__content\"></div>\r\n      <div className=\"spinner__content\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport classNames from '../../helpers/classNames';\r\nimport Spinner from '../spinner';\r\nimport './input.scss';\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\n\r\ninterface InputProps {\r\n  loading: boolean,\r\n  onChangeInput?: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n  onClickButton?: (e: React.MouseEvent<HTMLButtonElement>) => void,\r\n  selfValue?: string\r\n}\r\n\r\nfunction Input({ loading, onChangeInput = () => {}, onClickButton = () => {}, selfValue = '' }: InputProps) {\r\n  return (\r\n    <div className='inputGroup'>\r\n      <button \r\n        className={\r\n          classNames({\r\n            inputGroup__button: true,\r\n            'inputGroup__button--active': selfValue.length > 0,\r\n            'inputGroup__button--disabled': loading\r\n          })\r\n        }\r\n        onClick={ onClickButton }\r\n      >\r\n        <FiChevronRight size={30}></FiChevronRight>\r\n      </button>\r\n      <input \r\n        className={\r\n          classNames({\r\n            inputGroup__input: true,\r\n            'inputGroup__input--disabled': loading\r\n          })\r\n        }\r\n        onChange={ onChangeInput }\r\n        id='myInput'\r\n        type='text'\r\n        placeholder='Ex: Facebook'\r\n      />\r\n      <label className='inputGroup__label' htmlFor='myInput'>\r\n        { loading ? selfValue : 'Organization Name' }\r\n        <Spinner active={loading}></Spinner>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","/**\r\n * Import Dependency\r\n */\r\nimport axios from 'axios';\r\n\r\nconst defaultInterceptor = (API_ENV_VARIABLE = 'REACT_APP_MAIN_API_URL', token = null) => {\r\n\r\n    let config = {\r\n        baseURL: process.env[API_ENV_VARIABLE]\r\n    }\r\n    if (token !== null) {\r\n        config = {\r\n            baseURL: process.env[API_ENV_VARIABLE],\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        }\r\n    }\r\n\r\n    const instance = axios.create(config);\r\n    \r\n    return instance;\r\n}\r\n\r\nexport default defaultInterceptor;","import defaultInterceptor from \"../interceptors/default.interceptor\";\r\n\r\n\r\nconst ApiInterceptorProvider = (API_ENV_VARIABLE = 'main', token = null) => {\r\n    let API_ENV = API_ENV_VARIABLE.toUpperCase();\r\n    API_ENV = `REACT_APP_${API_ENV}_API_URL`;\r\n    return defaultInterceptor(API_ENV, token);\r\n}\r\n\r\nexport default class ApiService {\r\n    constructor(apiName = 'main', token = null) {\r\n        this.apiName = apiName;\r\n        this.token = token;\r\n        this.axiosHttp = ApiInterceptorProvider(apiName, token);\r\n    }\r\n\r\n    get(uri, params )\r\n    {\r\n        return this.axiosHttp.get(uri,{params}).catch(error => {\r\n            throw new Error(`ApiService ${error}`);\r\n        });\r\n    }\r\n\r\n    post(uri, params)\r\n    {\r\n        return this.axiosHttp.post(uri,params);\r\n    }\r\n\r\n    put(uri, params)\r\n    {\r\n        return this.axiosHttp.put(uri,params);\r\n    }\r\n\r\n    patch(uri, params)\r\n    {\r\n        return this.axiosHttp.patch(uri,params);\r\n    }\r\n\r\n    delete(uri)\r\n    {\r\n        return this.axiosHttp.delete(uri).catch(error => {\r\n            throw new Error(`ApiService ${error}`);\r\n        });\r\n    }\r\n};\r\n\r\n\r\n","import ApiServiceProvider from '../../core/providers/api.service.provider';\r\n\r\nconst ApiService = ApiServiceProvider();\r\n\r\nfunction fetchOrganization(organizationName: string) {\r\n  return ApiService.get(`orgs/${organizationName}`);\r\n}\r\n\r\nfunction fetchOrganizationRepository(organizationName: string) {\r\n  return ApiService.get(`orgs/${organizationName}/repos`);\r\n}\r\n\r\n\r\nexport default { fetchOrganization, fetchOrganizationRepository };","import ApiService from '../services/api.service';\r\n\r\nconst ApiServiceProvider = (apiName = 'main', token = null) => {\r\n    return new ApiService(apiName,token);\r\n};\r\n\r\nexport default ApiServiceProvider;","import React, { useState } from 'react';\r\nimport Input from '../../shared/components/input';\r\nimport { PagesContext } from '../../shared/contexts/PagesContext';\r\nimport './Search.scss';\r\nimport OrganizationService from '../../shared/services/organization.service';\r\n\r\nfunction onClickButtonAction({organizationName, setLoading}: any, context: any) {\r\n  OrganizationService\r\n    .fetchOrganization(organizationName)\r\n    .then(\r\n      (res) => {\r\n        return res.data;\r\n        }\r\n      ).then(\r\n        (organization) => {\r\n          return { organization, repositoriesResponse: OrganizationService.fetchOrganizationRepository(organizationName) }\r\n        }\r\n      ).then(\r\n        ({organization, repositoriesResponse}) => {\r\n          repositoriesResponse.then(\r\n            (res) => {\r\n              context.setOrganization({\r\n                ...organization,\r\n                repositories: res.data\r\n              })\r\n              context.slickRef.slickGoTo(1)\r\n              setTimeout(() => {\r\n                setLoading(false)\r\n              },2000)\r\n              \r\n            }\r\n          )\r\n        }\r\n    )\r\n    .catch(\r\n      (err) => {\r\n        setLoading(false);\r\n      }\r\n    )\r\n}\r\n\r\nfunction Search() {\r\n\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const [organizationName, setOrganizationName] = useState<string>('');\r\n  \r\n  return (\r\n    <PagesContext.Consumer>\r\n      { (context) => {\r\n        return (\r\n          <div className=\"app__page\">\r\n            <Input\r\n              onChangeInput={\r\n                (e) => {\r\n                  setOrganizationName(e.target.value)\r\n                }\r\n              }\r\n              onClickButton={\r\n                (e) => {\r\n                  setLoading(true);\r\n                  onClickButtonAction({organizationName, setLoading}, context);\r\n                }\r\n              }\r\n              \r\n              loading={ loading }\r\n              selfValue={ organizationName }\r\n            ></Input>\r\n          </div>      \r\n        )\r\n      }}\r\n    </PagesContext.Consumer>\r\n    \r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport Slider from 'react-slick';\r\nimport { PagesContext, PagesContextProvider } from '../shared/contexts/PagesContext';\r\nimport Organization from './organization';\r\nimport Search from './search';\r\n\r\nfunction Pages() {  \r\n  const settings = {\r\n    dots: false,\r\n    infinite: true,\r\n    speed: 500,\r\n    slidesToShow: 1,\r\n    slidesToScroll: 1,\r\n    arrows: false,\r\n    draggable: false\r\n  };\r\n\r\n\r\n  return (\r\n    <PagesContextProvider>\r\n      <PagesContext.Consumer>\r\n        {\r\n          ({setSlickRef}) => {\r\n            return (\r\n              <div className=\"app\">\r\n                <Slider {...settings} ref={slider => {setSlickRef(slider)}}>\r\n                  <div className=\"carousel__cell\">\r\n                    <Search></Search>\r\n                  </div>\r\n                  <div className=\"carousel__cell\">\r\n                    <Organization></Organization>\r\n                  </div>\r\n                </Slider>\r\n              </div>\r\n            )\r\n          }\r\n        }\r\n      </PagesContext.Consumer>\r\n      \r\n    </PagesContextProvider>\r\n  );\r\n\r\n}\r\n\r\nexport default Pages;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/build.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Pages from './pages';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pages />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}